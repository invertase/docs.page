---
import FontAwesome, { FontAwesomeProps } from '@components/FontAwesome';
import Link from '@components/Link';
import context from 'src/context';
import { isExternalLink } from 'src/utils';

const { owner, repository, config, relativePath } = context.get();
let sidebar = config.sidebar || [];

// If the sidebar is an object (locales), find the right one.
if (!Array.isArray(sidebar)) {
  console.log(relativePath);
  const [locale] = relativePath.split('/').filter(Boolean);
  sidebar = sidebar[locale] || [];
}

function getLinkRef(href: string): string | undefined {
  if (import.meta.env.DEV || isExternalLink(href)) {
    return;
  }

  return 'prefetch';
}

type Anchor = { icon: FontAwesomeProps['name']; title: string; href: string };

const anchors = [{
  icon: 'github',
  title: 'GitHub',
  href: `https://github.com/${owner}/${repository}`
}] satisfies Anchor[];

if (config.twitter) {
  anchors.push({
    icon: 'twitter',
    title: 'Twitter',
    href: `https://twitter.com/${config.twitter}`
  });
}
---

<nav class="mt-9">
  <ul class="mb-6 space-y-3">
    {anchors.map((anchor) => (
      <li>
        <Link href={anchor.href} className="group flex items-center gap-2">
          <span class="w-6 h-6 rounded border opacity-75 dark:border-zinc-700 group-hover:border-transparent inline-flex items-center justify-center text-[14px] group-hover:bg-docs-theme group-hover:opacity-100 transition group-hover:text-white">
            <FontAwesome name={anchor.icon} />
          </span>
          <span class="text-sm font-medium tracking-wide opacity-75 group-hover:opacity-100 transition">{anchor.title}</span>
        </Link>
      </li>
    ))}
  </ul>
  <ul class="lg:text-sm lg:leading-6">
    {
      sidebar.map(([title, urlOrChildren]) => {
        if (typeof urlOrChildren === 'string') {
          return (
            <li>
              <Link
                href={urlOrChildren}
                className="mb-3 block font-medium  opacity-75 transition hover:opacity-100"
                activeClassName="text-docs-theme opacity-100"
                rel={getLinkRef(urlOrChildren)}
              >
                {title}
              </Link>
            </li>
          );
        }

        return (
          <li class="my-8">
            <h5 class="mb-3 block font-semibold tracking-wide">{title}</h5>
            <ul class="space-y-2 border-l dark:border-slate-700">
              {urlOrChildren.map(([title, url]) => (
                <li>
                  <Link
                    href={url}
                    className="hover:border-docs-theme relative -left-px block border-l border-transparent pl-4 opacity-75 transition hover:opacity-100"
                    activeClassName="border-docs-theme opacity-100 font-semibold tracking-wide text-docs-theme"
                    rel={getLinkRef(url)}
                  >
                    {title}
                  </Link>
                </li>
              ))}
            </ul>
          </li>
        );
      })
    }
  </ul>
</nav>
