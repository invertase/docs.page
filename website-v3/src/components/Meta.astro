---
import context from 'src/context';

const { owner, repository, ref, domain, relativePath, frontmatter, config } = context.get();

const title = frontmatter.title || frontmatter.name || `${owner}/${repository}`;
const description = frontmatter.description || config.description || '';
const url = domain
  ? `https://${domain}${ref && `/~${ref}`}${relativePath}`
  : `https://docs.page/${owner}/${repository}${ref && `~${ref}`}${relativePath}`;

let image = frontmatter.image || config.socialPreview;
if (!image) {
  const params = new URLSearchParams({
    owner,
    repository,
  });

  if (config.name) params.set('name', config.name);
  if (frontmatter.title) params.set('title', frontmatter.title);
  if (frontmatter.description || config.description)
    params.set('description', frontmatter.description || config.description);
  if (config.logo) params.set('logo', config.logo);

  image = `https://og.docs.page?${params.toString()}`;
}
---

<title>{title}</title>
{!!description && <meta name="description" content={description} />}

<meta name="twitter:card" content="summary_large_image" />
{config.twitter && <meta name="twitter:site" content={`@${config.twitter}`} />}
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={image} />

<meta property="og:type" content="article" />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={url} />
<meta property="og:image" content={image} />
