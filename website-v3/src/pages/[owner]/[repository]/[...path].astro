---
import Root from '@layouts/Root.astro';
import Header from '@layouts/Header.astro';
import Footer from '@layouts/Footer.astro';
import Sidebar from '@layouts/Sidebar.astro';
import Navigation from '@layouts/Navigation.astro';

import Meta from '@components/Meta.astro';
import Scripts from '@components/Scripts.astro';
import Styles from '@components/Styles.astro';
import Links from '@components/Links.astro';
import PreviousNext from '@components/PreviousNext.astro';
import Markdown from '@components/Markdown';

import { getBundle } from 'src/bundle';
import context from 'src/context';
import type { GetBundleResponse, GetBundleResponseError } from 'src/bundle';
import { isExternalLink, replaceMoustacheVariables, ensureLeadingSlash } from 'src/utils';
import Theme from '@components/Theme.astro';
import domains from '../../../../../domains.json';
import { trackPageRequest } from 'src/plausible';
import NotFound from '@layouts/NotFound.astro';

let status: GetBundleResponse['status'] = 404;
let reason: GetBundleResponseError['reason'] | undefined = undefined;
let { owner, repository, path } = Astro.params;
let ref: string | undefined;

if (owner && repository) {
  // Check if the repo includes a ref (invertase/foo~bar)
  if (repository.includes('~')) {
    [repository, ref] = repository.split('~');
  }

  let bundle: GetBundleResponse['bundle'];

  try {
    const response = await getBundle({
      owner,
      repository,
      ref,
      path,
    });

    status = response.status;
    bundle = response.bundle;
  } catch (e) {
    console.error(e);
  }

  // Set the status code for the request
  Astro.response.status = status!;

  if ('statusCode' in bundle!) {
    Astro.response.status = bundle!.statusCode;
    reason = bundle!.reason;
  } else {
    // Handle a frontmatter redirect
    const redirect = bundle!.frontmatter.redirect;
    if (redirect && isExternalLink(redirect)) {
      return Astro.redirect(redirect);
    } else if (redirect) {
      return Astro.redirect(`/${owner}/${repository}${redirect}`);
    }

    if (import.meta.env.PROD) {
      // Track the page request
      await trackPageRequest(Astro.request);
    }

    // Set the cache headers - see https://vercel.com/docs/concepts/edge-network/caching
    Astro.response.headers.set('Cache-Control', 's-maxage=1, stale-while-revalidate=59');

    // Set the theme color
    const theme = Astro.cookies.get('theme').value;

    // Get any syncronized tabs
    let tabs = {};
    try {
      tabs = Astro.cookies.get('tabs').json();
    } catch {
      // noop
    }

    const config = bundle!.config;
    const source = bundle!.source;
    const domain = domains.find(([, repository]) => repository === `${owner}/${repository}`)?.at(0);

    // Set the context store.
    context.set({
      owner,
      repository,
      relativePath: ensureLeadingSlash(path || '/'),
      githubPath: `https://github.com/${owner}/${repository}/edit/${
        source.type === 'branch' && source.ref !== 'HEAD' ? source.ref : bundle!.baseBranch
      }/docs/${path || 'index'}.mdx`,
      githubRefPath: (() => {
        let base = `https://github.com/${owner}/${repository}`;
        if (source.ref === 'HEAD') return base;
        if (source.type === 'branch') return base + `/tree/${ref}`;
        if (source.type === 'commit') return base + `/commit/${ref}`;
        if (source.type === 'PR') return base + `/pull/${ref}`;
        return '';
      })(),
      ref,
      config,
      frontmatter: bundle!.frontmatter,
      code: replaceMoustacheVariables(config.variables ?? {}, bundle!.code),
      headings: bundle!.headings,
      domain,
      baseBranch: bundle!.baseBranch,
      source,
      theme: theme ? (theme === 'dark' ? 'dark' : 'light') : undefined,
      tabs,
    });
  }
}

let state: 'success' | 'error' | 'not-found';
switch (status) {
  case 200:
    state = 'success';
    break;
  case 404:
    state = 'not-found';
    break;
  default:
    state = 'error';
    break;
}

function reasonToTitle(reason: GetBundleResponseError['reason']) {
  switch (reason) {
    case 'REPO_NOT_FOUND':
      return 'Repository not found';
    case 'BUNDLE_ERROR':
      return 'Something went wrong';
    case 'REF_NOT_FOUND':
      return 'Git ref not found';
    case 'BAD_CONFIG':
    case 'MISSING_CONFIG':
      return 'Invalid configuration file';
  }
}

function reasonToDescription(reason: GetBundleResponseError['reason']) {
  switch (reason) {
    case 'REPO_NOT_FOUND':
      return 'Sorry, we could not find the repository you were looking for.';
    case 'BUNDLE_ERROR':
      return 'Sorry, something went wrong whilst bundling the page.';
    case 'REF_NOT_FOUND':
      return 'Sorry, the provided Git ref was not found within the repository.';
    case 'BAD_CONFIG':
    case 'MISSING_CONFIG':
      return 'Sorry, the provided docs.page configuration file is invalid.';
  }
}
---

{
  state === 'not-found' && (
    <Root>
      <NotFound
        title={reasonToTitle(reason!)}
        description={reasonToDescription(reason!) + ` (${reason})`}
        href={reason === 'REPO_NOT_FOUND' ? '/' : `/${owner}/${repository}`}
      />
    </Root>
  )
}

{
  state === 'error' && (
    <Root>
      <NotFound
        title="Something went wrong"
        description="Sorry, something went wrong whilst bundling the page."
        href={`/${owner}/${repository}`}
      />
    </Root>
  )
}

{
  state === 'success' && (
    <Root>
      <Meta slot="head" />
      <Theme slot="head" fallback="#00bcd4" />
      <Scripts slot="head" />
      <Styles slot="head" />
      <Links slot="head" />
      <Header />
      <section class="max-w-8xl mx-auto px-4 sm:px-6 md:px-8">
        <div class="fixed top-16 bottom-0 left-[max(0px,calc(50%-46rem))] right-auto z-20 hidden w-[19.5rem] overflow-y-auto px-6 pb-10 sm:px-8 md:px-10 lg:block">
          <Sidebar />
        </div>
        <div class="lg:pl-[20rem]">
          <div class="flex flex-row items-stretch gap-12 pt-9">
            <div class="relative mx-auto max-w-3xl flex-grow overflow-auto text-slate-500 dark:text-slate-400 xl:-ml-12 xl:max-w-[47rem] xl:pr-1 xl:pl-12">
              <Markdown />
              <PreviousNext />
              <Footer />
            </div>
            <div class="z-10 hidden w-[17rem] flex-none pl-10 xl:flex">
              <nav class="fixed h-[calc(100%-8rem)] w-[16.5rem] overflow-y-auto text-sm leading-6">
                <Navigation />
              </nav>
            </div>
          </div>
        </div>
      </section>
    </Root>
  )
}
