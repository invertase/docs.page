---
import context from 'src/context';

const ctx = context.get();
const { config, theme, owner, repository, ref, domain } = ctx;
---

<script is:inline define:vars={{ config, theme, owner, repository, ref, domain }}>
  // Load the context into the window, so we can access it from other scripts
  // without losing access to Astros script hoisting.
  window.docs_page = { config, theme, owner, repository, ref, domain };
</script>
<script>
  /**
   * This script is used to load the Algolia DocSearch library, and apply it to
   * the search input with the `data-docsearch` attribute.
   */
  const { config } = (window as any).docs_page;

  const element = document.querySelector('div[data-docsearch]');

  if (config?.docsearch && element) {
    const docsearch = (await import('@docsearch/js')).default;
    const overrides = document.querySelectorAll('button[data-docsearch-override]');
    docsearch({
      container: element as HTMLElement,
      ...config.docsearch,
    });

    // Once triggered, get the native docsearch button and hide it.
    const button = element.querySelector('button.DocSearch') as HTMLButtonElement;
    button.style.display = 'none';

    for (const override of overrides) {
      // Then attach our own button to the native one
      override.addEventListener('click', () => button.click());
    }
  }
</script>

<script>
  const { owner, repository, domain, ref } = (window as any).docs_page;
  const locale = document.querySelector('select#locale');

  if (locale) {
    locale?.addEventListener('change', event => {
      const { value } = event.target as HTMLSelectElement;
      let href = repository ? `/${owner}/${repository}` : `/${owner}`;
      if (ref) href += `~${encodeURIComponent(ref)}`;
      window.location.href = href + `/${value}`;
    });
  }
</script>

<script>
  import type { Context } from 'src/context';
  import { themeToggleLogic } from 'src/utils';

  const { owner, repository, domain, ref } = (window as any).docs_page as Context;

  themeToggleLogic({ owner, repository, domain, ref });
</script>

<script>
  import { sideBarToggleLogic } from 'src/utils';

  sideBarToggleLogic();
</script>

<script>
  /**
   * This script looks for any buttons with the `data-copy` attribute, and adds
   * an event listener to copy the value of the `data-copy-value` attribute to.
   */

  const copy = document.querySelectorAll('[data-copy]');

  for (const button of copy) {
    button.addEventListener('click', () => {
      button.innerHTML = 'Copied';
      navigator.clipboard.writeText(button.getAttribute('data-copy-value') || '');

      setTimeout(() => {
        button.innerHTML = 'Copy';
      }, 1500);
    });
  }
</script>

<script>
  /**
   * This script is used to load the Twitter library, and apply it to any tweets
   * with the `data-tweet="true"` attribute.
   */
  declare global {
    interface Window {
      twttr: {
        widgets: {
          createTweet: (tweetId: string, el: HTMLElement, options?: any) => Promise<void>;
        };
      };
    }
  }

  const { theme } = (window as any).docs_page;

  const tweets = document.querySelectorAll('div[data-tweet]');

  if (tweets.length) {
    const script = document.createElement('script');
    script.src = 'https://platform.twitter.com/widgets.js';

    script.onload = () => {
      for (const tweet of tweets) {
        const id = tweet.getAttribute('data-tweet-id')!;
        window.twttr.widgets.createTweet(id, tweet as HTMLElement, {
          dnt: true,
          cards: tweet.getAttribute('data-tweet-cards') === 'true' ? '' : 'hidden',
          conversation: tweet.getAttribute('data-tweet-conversation') === 'true' ? '' : 'hidden',
          theme:
            theme ||
            (document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light'),
        });
      }
    };

    document.head.appendChild(script);
  }
</script>

<script>
  /**
   * This script is used to load the Medium Zoom library, and apply it to any images
   * with the `data-zoom="true"` attribute.
   */

  // Only download the library if we need it.
  if (document.querySelectorAll('main img[data-zoom="true"]').length) {
    const zoom = (await import('medium-zoom')).default;
    zoom('main img[data-zoom="true"]', {
      container: document.body,
      // Theme is applied via CSS in Styles.astro
      background: 'transparent',
    });
  }
</script>

<script>
  /**
   * The script finds any CodeGroup components, and applies some basic JS to handle
   * changing between different languages.
   */

  const groups = document.querySelectorAll('div[data-code-group]');

  const getButtons = (el: Element) => el.querySelectorAll('button[data-code-group-button]');
  const getPanes = (el: Element) => el.querySelectorAll('div[data-code-group-pane]');

  const setButtonState = (button: Element, id: string) => {
    const active = (button.getAttribute('data-code-group-button-id') === id).toString();
    button.setAttribute('aria-selected', active);
  };

  const setPaneState = (pane: Element, id: string) => {
    pane.setAttribute(
      'aria-expanded',
      (pane.getAttribute('data-code-group-pane-id') === id).toString(),
    );
  };

  for (const group of groups) {
    const buttons = getButtons(group);
    const panes = getPanes(group);
    const copyButton = group.querySelector('button[data-copy]');

    for (const button of buttons) {
      const buttonId = button.getAttribute('data-code-group-button-id')!;

      button.addEventListener('click', () => {
        for (const button of buttons) setButtonState(button, buttonId);
        for (const pane of panes) {
          if (pane.getAttribute('data-code-group-pane-id') == buttonId) {
            copyButton?.setAttribute(
              'data-copy-value',
              pane.getAttribute('data-code-group-pane-raw') ?? '',
            );
          }
          setPaneState(pane, buttonId);
        }
      });
    }
  }
</script>

<script>
  /**
   * This script is used to identify any tab groups on the page, and add event
   * when a tab button is clicked. It also syncs the state of the tabs with a
   * group ID across the page, and onto a cookie via the server.
   */

  const { owner, repository, ref, domain } = (window as any).docs_page;

  const tabs = document.querySelectorAll('div[data-tab-group]');

  const getButtons = (el: Element) => el.querySelectorAll('button[data-tab-group-button]');
  const getPanes = (el: Element) => el.querySelectorAll('div[data-tab-group-pane]');

  const setButtonState = (button: Element, id: string) => {
    const active = (button.getAttribute('data-tab-group-button-id') === id).toString();
    button.setAttribute('aria-selected', active);
  };

  const setPaneState = (pane: Element, id: string) => {
    pane.setAttribute(
      'aria-expanded',
      (pane.getAttribute('data-tab-group-pane-id') === id).toString(),
    );
  };

  for (const tab of tabs) {
    const groupId = tab.getAttribute('data-tab-group-id');
    const groups = groupId ? document.querySelectorAll(`div[data-tab-group-id="${groupId}"]`) : [];

    const buttons = getButtons(tab);
    const panes = getPanes(tab);

    for (const button of buttons) {
      const buttonId = button.getAttribute('data-tab-group-button-id')!;

      button.addEventListener('click', () => {
        if (groupId) {
          fetch('/api/docs.page/tabs-sync', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ owner, repository, ref, domain, groupId, buttonId }),
          });
        }

        for (const button of buttons) setButtonState(button, buttonId);
        for (const pane of panes) setPaneState(pane, buttonId);

        for (const group of groups) {
          const buttons = getButtons(group);
          const panes = getPanes(group);

          for (const button of buttons) setButtonState(button, buttonId);
          for (const pane of panes) setPaneState(pane, buttonId);
        }
      });
    }
  }
</script>
{
  config?.googleAnalytics && (
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${config.googleAnalytics}`} />
  )
}
{
  config?.googleAnalytics && (
    <script
      slot="head"
      type="text/javascript"
      data-value={config.googleAnalytics}
      set:html={`
      window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments)}
      gtag('js', new Date()); gtag('config', document.currentScript.getAttribute('data-value'));
      `}
    />
  )
}
{
  config?.googleTagManager && (
    <script
      slot="head"
      type="text/javascript"
      data-value={config.googleTagManager}
      set:html={`
      (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
      })(window,document,'script','dataLayer',document.currentScript.getAttribute('data-value'));
      `}
    />
  )
}
{
  config?.plausibleAnalytics && domain && (
    <script slot="head" defer data-domain={domain} src={config.plausibleAnalyticsScript} />
  )
}
