---
import Root from '@layouts/Root.astro';
import DocsView from '@layouts/DocsView.tsx';
import ErrorPage from '@layouts/ErrorPage.astro';

import { type GetBundleResponse, getBundle, type GetBundleResponseError } from 'src/bundle';
import { trackPageRequest } from 'src/plausible';
import context from 'src/context';
import domains from '../../../../../domains.json';
import { isExternalLink, replaceMoustacheVariables, ensureLeadingSlash } from 'src/utils';
import Links from '@components/Links.astro';
import Meta from '@components/Meta.astro';
import Scripts from '@components/Scripts.astro';
import Styles from '@components/Styles.astro';
import Theme from '@components/Theme.astro';

let { owner, repository, path } = Astro.params;

let ref: string | undefined;
let status: number = 200;

if (!owner || !repository) {
  throw new Error('Something went wrong - owner and repository are required.')
}

// Check if the repo includes a ref (invertase/foo~bar)
if (repository.includes('~')) {
  [repository, ref] = repository.split('~');
}

let response: GetBundleResponse | undefined;
let code: GetBundleResponse['code'];
let error: GetBundleResponseError = { message: '' };

try {
  response = await getBundle({
    owner,
    repository,
    ref,
    path,
  });
  
  code = response.code;
  // refer to [api/src/routes/bundle.ts] for more information;
  if ('error' in response) error = response.error;
} catch (e) {
  console.error(e);
  code = 'BUNDLE_ERROR';
  error.message = 'An error occurred while fetching the bundle.'
}

const statusCodes = {
  OK: 200,
  BAD_REQUEST: 404,
  NOT_FOUND: 404,
  FILE_NOT_FOUND: 404,
  REPO_NOT_FOUND: 404,
  BUNDLE_ERROR: 500,
} satisfies { [key in GetBundleResponse['code']]: number };

// Get & set the status code from the bundle code.
status = statusCodes[code];


if (response?.code === 'OK') {
  const { frontmatter, config, source, baseBranch, code, headings } = response!.data;

  const domain = domains.find(([, repo]) => repo === `${owner}/${repository}`)?.at(0);

  // Handle a frontmatter redirect
  const redirect = frontmatter.redirect;
  if (redirect && isExternalLink(redirect)) {
    return Astro.redirect(redirect);
  } else if (redirect && domain) {
    // If there is a domain setup, always redirect to it.
    let url = `https://${domain}`;
    if (ref) url += `/~${ref}`;
    url += redirect;
    return Astro.redirect(url);
  } else if (redirect && !domain) {
    // If no domain, redirect to docs.page.
    let url = `https://docs.page/${owner}/${repository}`;
    if (ref) url += `~${ref}`;
    url += redirect;
    return Astro.redirect(url);
  }

  if (import.meta.env.PROD) {
    // Track the page request
    await trackPageRequest(Astro.request, owner, repository);

    // Set the cache headers - see https://vercel.com/docs/concepts/edge-network/caching
    Astro.response.headers.set('Cache-Control', 's-maxage=1, stale-while-revalidate=59');
  }

  // Set the theme color
  const theme = Astro.cookies.get('theme')?.value;

  // Get any syncronized tabs
  let tabs = {};
  try {
    tabs = Astro.cookies.get('tabs')?.json() ?? {};
  } catch {}
  
  let relativePath = ensureLeadingSlash(path || '/');
  let locale: string | undefined;

  // Check whether the request is for a valid locale.
  if (config.locales.length) {
    [locale] = relativePath.split('/').filter(Boolean);
    if (!config.locales.includes(locale)) {
      locale = undefined;
    } else {
      relativePath = relativePath.replace(`/${locale}`, '');
    }
  }

  // Figure out the sidebar based on the locale.
  let sidebar = [];
  if (locale && !Array.isArray(config.sidebar)) {
    sidebar = config.sidebar[locale];
  } else if (!Array.isArray(config.sidebar)) {
    sidebar = config.sidebar['default'] || [];
  } else {
    sidebar = config.sidebar;
  }

  // Set the context store.
  context.set({
    owner,
    repository,
    relativePath,
    locale,
    githubPath: `https://github.com/${owner}/${repository}/edit/${
      source.type === 'branch' && source.ref !== 'HEAD' ? source.ref : baseBranch
    }/docs/${path || 'index'}.mdx`,
    githubRefPath: (() => {
      let base = `https://github.com/${owner}/${repository}`;
      if (source.ref === 'HEAD') return base;
      if (source.type === 'branch') return base + `/tree/${ref}`;
      if (source.type === 'commit') return base + `/commit/${ref}`;
      if (source.type === 'PR') return base + `/pull/${ref}`;
      return '';
    })(),
    ref,
    sidebar,
    config,
    frontmatter,
    code: replaceMoustacheVariables(config.variables ?? {}, code),
    headings,
    domain,
    baseBranch,
    source,
    theme: theme ? (theme === 'dark' ? 'dark' : 'light') : undefined,
    tabs,
  });

}

function codeToTitle(code: GetBundleResponse['code']) {
  switch (code) {
    case 'NOT_FOUND':
    case 'REPO_NOT_FOUND':
    case 'BAD_REQUEST':
      return 'Repository not found.';
    case 'FILE_NOT_FOUND':
      return 'Page not found.';
    case 'BUNDLE_ERROR':
      return 'Something went wrong.';
  }
}
---

{
  status === 404 && (
    <Root>
      <ErrorPage
        code={404}
        errorName={code}
        title={codeToTitle(code)}
        description={error.message}
        cause={error.cause}
        links={error.links}
      />
    </Root>
  )
}

{
  status === 500 && (
    <Root>
      <ErrorPage
        code={500}
        title="Something went wrong"
        errorName={code}
        description={error.message}
        cause={error.cause}
        links={error.links}
      />
    </Root>
  )
}

{
  status === 200 && (
    <Root>
      <Meta slot="head" />
      <Theme slot="head" fallback="#00bcd4" />
      <Scripts slot="head" />
      <Styles slot="head" />
      <Links slot="head" />
      <DocsView />
    </Root>
  )
}
