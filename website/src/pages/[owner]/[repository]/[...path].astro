---
import Root from '@layouts/Root.astro';
import DocsView from '@layouts/DocsView.tsx';
import ErrorPage from '@layouts/ErrorPage.astro';

import { type BundleResponse, type BundlerOutput, getBundle } from 'src/bundle';
import { trackPageRequest } from 'src/plausible';
import context from 'src/context';
import domains from '../../../../../domains.json';
import { isExternalLink, replaceMoustacheVariables, ensureLeadingSlash } from 'src/utils';
import Links from '@components/Links.astro';
import Meta from '@components/Meta.astro';
import Scripts from '@components/Scripts.astro';
import Styles from '@components/Styles.astro';
import Theme from '@components/Theme.astro';

let { owner, repository, path } = Astro.params;

let ref: string | undefined;
let status: number = 200;

if (!owner || !repository) {
  throw new Error('Something went wrong - owner and repository are required.')
}

// Check if the repo includes a ref (invertase/foo~bar)
if (repository.includes('~')) {
  [repository, ref] = repository.split('~');
}

let response: BundleResponse | undefined = undefined;
let code: BundleResponse['code'];
let error: BundleResponse['error'] = { message: '', cause: '', links: [] };

try {
  response = await getBundle({
    owner,
    repository,
    ref,
    path,
  });
  
  code = response.code;
  // refer to [api/src/routes/bundle.ts] for more information;
  if ('error' in response) error = response.error;
} catch (e) {
  console.error(e);
  code = 'BUNDLE_ERROR';
  error.message = 'An error occurred while fetching the bundle.'
}

const statusCodes = {
  OK: 200,
  BAD_REQUEST: 404,
  NOT_FOUND: 404,
  FILE_NOT_FOUND: 404,
  REPO_NOT_FOUND: 404,
  BUNDLE_ERROR: 500,
  INTERNAL_SERVER_ERROR: 500,
} satisfies { [key in BundleResponse['code']]: number };

// Get & set the status code from the bundle code.
status = statusCodes[code];

if (response?.code === 'OK') {
  const bundle = response.data;

  // Find whether this repository has a domain setup.
  const domain = domains.find(([, repo]) => repo === `${owner}/${repository}`)?.at(0);

  // Handle a frontmatter redirect
  const redirect = bundle.frontmatter.redirect;
  if (typeof redirect === 'string' && isExternalLink(redirect)) {
    return Astro.redirect(redirect);
  } else if (typeof redirect === 'string' && domain) {
    // If there is a domain setup, always redirect to it.
    let url = `https://${domain}`;
    if (ref) url += `/~${ref}`;
    url += redirect;
    return Astro.redirect(url);
  } else if (typeof redirect === 'string' && !domain) {
    // If no domain, redirect to docs.page.
    let url = `https://docs.page/${owner}/${repository}`;
    if (ref) url += `~${ref}`;
    url += redirect;
    return Astro.redirect(url);
  }

  if (import.meta.env.PROD) {
    // Track the page request
    await trackPageRequest(Astro.request, owner, repository);

    // Set the cache headers - see https://vercel.com/docs/concepts/edge-network/caching
    Astro.response.headers.set('Cache-Control', 's-maxage=1, stale-while-revalidate=59');
  }

  // Set the context store.
  context.set({
    request: Astro.request,
    owner,
    repository,
    ref,
    bundle,
    domain,
  });

}

function codeToTitle(code: BundleResponse['code']) {
  switch (code) {
    case 'NOT_FOUND':
    case 'REPO_NOT_FOUND':
    case 'BAD_REQUEST':
      return 'Repository not found.';
    case 'FILE_NOT_FOUND':
      return 'Page not found.';
    case 'BUNDLE_ERROR':
    case 'INTERNAL_SERVER_ERROR':
    default:
      return 'Something went wrong.';
  }
}
---

{
  status === 404 && (
    <Root>
      <ErrorPage
        code={404}
        errorName={code}
        title={codeToTitle(code)}
        description={error.message}
        cause={error.cause}
        links={error.links}
      />
    </Root>
  )
}

{
  status === 500 && (
    <Root>
      <ErrorPage
        code={500}
        title="Something went wrong"
        errorName={code}
        description={error.message}
        cause={error.cause}
        links={error.links}
      />
    </Root>
  )
}

{
  status === 200 && (
    <Root>
      <Meta slot="head" />
      <Theme slot="head" fallback="#00bcd4" />
      <Scripts slot="head" />
      <Styles slot="head" />
      <Links slot="head" />
      <DocsView />
    </Root>
  )
}
